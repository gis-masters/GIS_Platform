package ru.mycrg.data_service.dao.utils;

import org.junit.Before;
import org.junit.Test;
import ru.mycrg.data_service_contract.dto.SchemaDto;
import ru.mycrg.data_service_contract.dto.SimplePropertyDto;
import ru.mycrg.data_service_contract.enums.ValueType;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import static java.time.LocalDateTime.now;
import static org.junit.Assert.assertEquals;
import static ru.mycrg.data_service.dao.utils.SqlBuilder.buildCopyQuery;
import static ru.mycrg.data_service.util.SystemLibraryAttributes.*;

public class SqlBuilderTest {

    private SchemaDto sourceSchema;
    private SchemaDto targetSchema;
    private SchemaDto targetSchemaWithoutSystemFields;

    @Before
    public void prepare() {
        SimplePropertyDto globalId = new SimplePropertyDto();
        globalId.setName("GLOBALID");
        globalId.setValueType(ValueType.STRING);
        SimplePropertyDto classId = new SimplePropertyDto();
        classId.setName("CLASSID");
        classId.setValueType(ValueType.STRING);
        SimplePropertyDto objectName = new SimplePropertyDto();
        objectName.setName("OBJECTNAME");
        objectName.setValueType(ValueType.STRING);
        SimplePropertyDto status = new SimplePropertyDto();
        status.setName("STATUS");
        status.setValueType(ValueType.STRING);

        SimplePropertyDto createdAt = new SimplePropertyDto();
        createdAt.setName(CREATED_AT.getName());
        createdAt.setValueType(ValueType.DATETIME);
        SimplePropertyDto createdBy = new SimplePropertyDto();
        createdBy.setName(CREATED_BY.getName());
        createdBy.setValueType(ValueType.STRING);
        SimplePropertyDto updatedBy = new SimplePropertyDto();
        updatedBy.setName(UPDATED_BY.getName());
        updatedBy.setValueType(ValueType.STRING);
        SimplePropertyDto lastModified = new SimplePropertyDto();
        lastModified.setName(LAST_MODIFIED.getName());
        lastModified.setValueType(ValueType.DATETIME);

        SchemaDto sourceSchema = new SchemaDto();
        sourceSchema.setName("test schema 1");
        sourceSchema.setTitle("Первая тестовая схема");
        sourceSchema.setOriginName("testSchemaFirst");
        sourceSchema.setProperties(Arrays.asList(globalId, status, classId));

        SchemaDto targetSchema = new SchemaDto();
        targetSchema.setName("test schema 2");
        targetSchema.setTitle("Вторая тестовая схема");
        targetSchema.setOriginName("testSchemaSecond");
        targetSchema.setProperties(Arrays.asList(globalId, status, classId, createdAt,
                                                 createdBy, lastModified, updatedBy));

        SchemaDto targetSchemaWithoutSystemFields = new SchemaDto();
        targetSchemaWithoutSystemFields.setName("test schema 3");
        targetSchemaWithoutSystemFields.setTitle("Третья тестовая схема");
        targetSchemaWithoutSystemFields.setOriginName("testSchemaThird");
        targetSchemaWithoutSystemFields.setProperties(Arrays.asList(globalId, status, classId));

        this.sourceSchema = sourceSchema;
        this.targetSchema = targetSchema;
        this.targetSchemaWithoutSystemFields = targetSchemaWithoutSystemFields;
    }

    @Test
    public void shouldBuildCopyQueryWithReplacingSystemField() {
        String sourceTable = "sourceTable";
        String targetTable = "targetTable";
        LocalDateTime now = now();
        String creator = "tester";

        List<Long> featureIds = Arrays.asList(1L, 2L);
        Map<String, Object> systemAutogeneratedField = new HashMap<>();
        systemAutogeneratedField.put(CREATED_BY.getName(), creator);
        systemAutogeneratedField.put(UPDATED_BY.getName(), creator);
        systemAutogeneratedField.put(CREATED_AT.getName(), now);
        systemAutogeneratedField.put(LAST_MODIFIED.getName(), now);

        String correctQuery = String.format(
                "INSERT INTO targetTable (globalid, status, classid, created_at, created_by, " +
                        "last_modified, updated_by) " +
                        "SELECT \"globalid\", \"status\", \"classid\", '%s', '%s', '%s', '%s' " +
                        "FROM sourceTable WHERE objectid IN (1,2) RETURNING objectid;", now, creator, now, creator);

        assertEquals(correctQuery, buildCopyQuery(sourceTable, targetTable, sourceSchema.getProperties(), targetSchema.getProperties(),
                                                  featureIds, systemAutogeneratedField));
    }

    @Test
    public void shouldBuildCopyQueryWithoutSystemFieldsWhenNoSuchFieldsInTargetSchema() {
        String sourceTable = "sourceTable";
        String targetTable = "targetTable";
        LocalDateTime now = now();
        String creator = "tester";

        List<Long> featureIds = Arrays.asList(1L, 2L);
        Map<String, Object> systemAutogeneratedField = new HashMap<>();
        systemAutogeneratedField.put(CREATED_BY.getName(), creator);
        systemAutogeneratedField.put(UPDATED_BY.getName(), creator);
        systemAutogeneratedField.put(CREATED_AT.getName(), now);
        systemAutogeneratedField.put(LAST_MODIFIED.getName(), now);

        String correctQuery = "INSERT INTO targetTable (globalid, status, classid) " +
                "SELECT \"globalid\", \"status\", \"classid\" " +
                "FROM sourceTable WHERE objectid IN (1,2) RETURNING objectid;";

        assertEquals(correctQuery, buildCopyQuery(sourceTable, targetTable, sourceSchema.getProperties(),
                                                  targetSchemaWithoutSystemFields.getProperties(), featureIds,
                                                  systemAutogeneratedField));
    }
}
