{
  "parser": "@typescript-eslint/parser",
  "plugins": [
    "unicorn",
    "import",
    "wix-editor",
    "@typescript-eslint",
    "simple-import-sort",
    "sort-class-members",
    "total-functions",
    "promise",
    "sonarjs",
    "etc",
    "react-hooks",
    "react"
  ],
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:@typescript-eslint/recommended-requiring-type-checking",
    "plugin:unicorn/recommended",
    "plugin:promise/recommended",
    "plugin:sonarjs/recommended",
    "plugin:import/warnings",
    "plugin:regexp/recommended",
    "plugin:total-functions/recommended",
    "plugin:etc/recommended"
  ],
  "env": {
    "browser": true,
    "es6": true,
    "node": false
  },
  "globals": {
    "__DEV__": true,
    "ClipboardItem": true,
    "navigator": true,
    "_environmentRaw": true,
    "global": true
  },
  "parserOptions": {
    "ecmaVersion": 2020,
    "project": "tsconfig.json",
    "sourceType": "module",
    "ecmaFeatures": { "jsx": true },
    "useJSXTextNode": true
  },
  "settings": {
    "react": {
      "pragma": "React",
      "version": "18.0"
    }
  },
  "rules": {
    // see https://github.com/airbnb/javascript/blob/master/packages/eslint-config-airbnb-base/rules/style.js#L122
    "indent": "off",

    "semi": [2, "always"],
    "semi-spacing": [2, { "before": false, "after": true }],
    "wrap-iife": [2, "inside"],
    "no-caller": 2,
    "no-cond-assign": [2, "except-parens"],
    "no-constant-condition": 2,
    "no-debugger": 2,
    "no-dupe-args": 2,
    "no-dupe-keys": 2,
    "no-duplicate-case": 2,
    "no-empty": [2, { "allowEmptyCatch": true }],
    "no-extra-boolean-cast": 2,
    "no-extra-semi": 2,
    "no-func-assign": 2,
    "no-new": 2,
    "no-sparse-arrays": 2,
    "no-undef": 2,
    "no-unexpected-multiline": 2,
    "no-unreachable": 2,
    "no-unused-vars": "off",

    "strict": 2,
    "max-params": [2, 5],
    "max-depth": [1, 4],
    "no-eq-null": 0,
    "no-unused-expressions": 2,
    "dot-notation": 2,
    "use-isnan": 2,

    // Best practices
    "block-scoped-var": 2,
    "complexity": [0, 11],
    "curly": [2, "all"],
    "eqeqeq": [2, "always", { "null": "ignore" }],
    "no-else-return": 2,
    "no-extra-bind": 2,
    "no-implicit-coercion": [2, { "allow": ["!!"] }],
    "no-return-assign": 0,
    "no-sequences": 2,
    "yoda": 2,

    // Variables
    "no-restricted-globals": [2, "fdescribe", "fit"],
    "no-var": 1,

    // Codestyle
    "arrow-parens": [2, "as-needed"],
    "array-bracket-spacing": [2, "never"],
    "brace-style": [2, "1tbs", { "allowSingleLine": true }],
    "camelcase": [1, { "properties": "never", "ignoreDestructuring": true }],
    "comma-dangle": ["error", "never"],
    "comma-spacing": [2, { "before": false, "after": true }],
    "eol-last": 2,
    "func-call-spacing": [2, "never"],
    "block-spacing": 2,
    "keyword-spacing": [2, { "before": true, "after": true }],
    "max-len": [
      2,
      {
        "code": 120,
        "ignoreUrls": true,
        "ignoreComments": false,
        "ignoreRegExpLiterals": true,
        "ignoreStrings": true,
        "ignoreTemplateLiterals": true,
        "ignorePattern": "require"
      }
    ],
    "no-lonely-if": 2,
    "no-mixed-spaces-and-tabs": 2,
    "no-multi-spaces": 2,
    "no-multiple-empty-lines": [2, { "max": 1, "maxBOF": 0, "maxEOF": 0 }],
    "no-trailing-spaces": 2,
    "no-unneeded-ternary": 2,
    "no-nested-ternary": 2,
    "object-curly-spacing": [2, "always"],
    "one-var-declaration-per-line": [2, "initializations"],
    "one-var": [2, { "let": "never", "const": "never" }],
    "operator-linebreak": "off",
    "padded-blocks": [2, "never"],
    "quote-props": [2, "as-needed", { "numbers": true }],
    "quotes": [2, "single", { "avoidEscape": true }],
    "space-before-blocks": [2, "always"],
    "space-before-function-paren": [
      2,
      {
        "asyncArrow": "always",
        "anonymous": "always",
        "named": "never"
      }
    ],
    "space-in-parens": 2,
    "no-console": [2, { "allow": ["assert", "error", "warn"] }],
    "key-spacing": [2, { "beforeColon": false, "afterColon": true, "mode": "strict" }],
    "space-infix-ops": 2,
    "newline-before-return": "error",

    // REACT
    // https://github.com/yannickcr/eslint-plugin-react/tree/master/docs/rules
    "jsx-quotes": [2, "prefer-single"],
    "react/jsx-boolean-value": 2,
    "react/display-name": 0,
    "react/jsx-closing-tag-location": 2,
    "react/jsx-equals-spacing": 2,
    "react/jsx-first-prop-new-line": [2, "multiline"],
    "react/jsx-handler-names": 0,
    "react/jsx-key": 2,
    "react/jsx-no-bind": 1,
    "react/jsx-no-duplicate-props": 2,
    "react/jsx-no-literals": 0,
    "react/jsx-no-undef": 2,
    "react/jsx-sort-props": 0,
    "react/jsx-tag-spacing": [2, { "beforeClosing": "never", "beforeSelfClosing": "always" }],
    "react/jsx-uses-react": 2,
    "react/jsx-uses-vars": 2,
    "react/no-find-dom-node": 2,
    "react/no-multi-comp": 0,
    "react/no-set-state": 0,
    "react/react-in-jsx-scope": 2,
    "react/require-optimization": 0,
    "react/self-closing-comp": 2,
    "react/style-prop-object": 2,
    "react/void-dom-elements-no-children": 2,

    // https://github.com/typescript-eslint/typescript-eslint/tree/master/packages/eslint-plugin#supported-rules
    "@typescript-eslint/consistent-type-assertions": 2,
    "@typescript-eslint/no-empty-interface": 2,
    "@typescript-eslint/no-unused-vars": [
      2,
      {
        "args": "after-used",
        "argsIgnorePattern": "^_",
        "ignoreRestSiblings": true,
        "vars": "all",
        "varsIgnorePattern": "^_"
      }
    ],
    "@typescript-eslint/explicit-module-boundary-types": [
      "error",
      {
        "allowedNames": [
          "render",
          "componentDidMount",
          "componentDidUpdate",
          "componentWillUnmount",
          "ngOnInit",
          "ngOnChanges",
          "ngAfterViewInit",
          "ngOnDestroy"
        ]
      }
    ],
    "@typescript-eslint/unbound-method": "off",
    "@typescript-eslint/no-misused-promises": ["error", { "checksConditionals": false, "checksVoidReturn": false }],
    "@typescript-eslint/no-empty-function": ["error", { "allow": ["private-constructors"] }],
    "@typescript-eslint/no-unsafe-enum-comparison": "off",

    // https://reactjs.org/docs/hooks-rules.html
    "react-hooks/rules-of-hooks": 2, // Checks rules of Hooks
    "react-hooks/exhaustive-deps": 1, // Checks effect dependencies

    // https://github.com/SonarSource/eslint-plugin-sonarjs
    "sonarjs/cognitive-complexity": 1,

    // regexp
    "regexp/no-obscure-range": [
      "error",
      {
        "allowed": ["alphanumeric", "а-я", "А-Я", "А-я"]
      }
    ],
    "regexp/strict": "off",

    // https://github.com/danielnixon/eslint-plugin-total-functions
    "total-functions/require-strict-mode": "off",
    "total-functions/no-unsafe-type-assertion": "off",
    "total-functions/no-unsafe-readonly-mutable-assignment": "off",
    "total-functions/no-partial-division": "off",
    "total-functions/no-enums": "off",
    "total-functions/no-partial-url-constructor": "off",

    // https://github.com/xjamundx/eslint-plugin-promise
    "promise/always-return": "off",

    // https://github.com/sindresorhus/eslint-plugin-unicorn
    "unicorn/filename-case": "off",
    "unicorn/prevent-abbreviations": "off",
    "unicorn/no-null": "off",
    "unicorn/no-array-reduce": "off",
    "unicorn/no-array-for-each": "off",
    "unicorn/explicit-length-check": "off",
    "unicorn/no-array-callback-reference": "off",
    "unicorn/number-literal-case": "off",
    "unicorn/new-for-builtins": "off",
    "unicorn/prefer-top-level-await": "off",
    "unicorn/prefer-module": "off",

    // https://github.com/lydell/eslint-plugin-simple-import-sort
    "simple-import-sort/imports": [
      "error",
      {
        "groups": [
          // Node.js builtins prefixed with `node:`.
          // Absolute imports and other imports such as Vue-style `@/foo`.
          // Anything not matched in another group.
          // Packages.
          ["^node:", "^", "^react$", "^react-dom", "^mobx", "^@mui/material$", "^@mui/", "^@?\\w", "^\\u0000.*\\.css"],
          // Relative imports.
          // Anything that starts with a dot.
          ["^\\."],
          // Side effect imports.
          ["^\\u0000"]
        ]
      }
    ]
  },
  "overrides": [
    {
      "files": ["*.test.{ts,tsx}"],
      "env": {
        "jest": true
      }
    },
    {
      "files": ["*.js"],
      "rules": {
        "strict": 0
      }
    }
  ]
}
